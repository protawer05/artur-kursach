{"ast":null,"code":"// services/orderStatusService.js\n\nclass OrderStatusService {\n  constructor() {\n    this.intervals = new Map();\n    this.statusFlow = ['processing', 'cooking', 'delivering', 'delivered'];\n  }\n  startStatusProgression(orderId) {\n    this.stopStatusProgression(orderId);\n    let currentStatusIndex = 0;\n    const updateStatus = async () => {\n      if (currentStatusIndex >= this.statusFlow.length - 1) {\n        this.stopStatusProgression(orderId);\n        return;\n      }\n      currentStatusIndex++;\n      const newStatus = this.statusFlow[currentStatusIndex];\n      try {\n        await this.updateOrderStatus(orderId, newStatus);\n        console.log(`Статус заказа ${orderId} обновлен на: ${newStatus}`);\n        if (currentStatusIndex >= this.statusFlow.length - 1) {\n          this.stopStatusProgression(orderId);\n        }\n      } catch (error) {\n        console.error('Ошибка обновления статуса:', error);\n        this.stopStatusProgression(orderId);\n      }\n    };\n    const intervalId = setInterval(updateStatus, 30000);\n    this.intervals.set(orderId, intervalId);\n    console.log(`Запущено автоматическое обновление статуса для заказа ${orderId}`);\n  }\n  stopStatusProgression(orderId) {\n    const intervalId = this.intervals.get(orderId);\n    if (intervalId) {\n      clearInterval(intervalId);\n      this.intervals.delete(orderId);\n      console.log(`Остановлено обновление статуса для заказа ${orderId}`);\n    }\n  }\n  async updateOrderStatus(orderId, newStatus) {\n    const response = await fetch(`https://68d662abc2a1754b426a8851.mockapi.io/orders/${orderId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: newStatus,\n        updatedAt: new Date().toISOString()\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update order status');\n    }\n    return response.json();\n  }\n  startForAllActiveOrders(orders) {\n    orders.forEach(order => {\n      if (order.status !== 'delivered' && order.status !== 'completed') {\n        this.startStatusProgression(order.id);\n      }\n    });\n  }\n  stopAll() {\n    this.intervals.forEach((intervalId, orderId) => {\n      clearInterval(intervalId);\n    });\n    this.intervals.clear();\n    console.log('Все интервалы обновления статусов остановлены');\n  }\n}\nconst orderStatusService = new OrderStatusService();\nexport default orderStatusService;","map":{"version":3,"names":["OrderStatusService","constructor","intervals","Map","statusFlow","startStatusProgression","orderId","stopStatusProgression","currentStatusIndex","updateStatus","length","newStatus","updateOrderStatus","console","log","error","intervalId","setInterval","set","get","clearInterval","delete","response","fetch","method","headers","body","JSON","stringify","status","updatedAt","Date","toISOString","ok","Error","json","startForAllActiveOrders","orders","forEach","order","id","stopAll","clear","orderStatusService"],"sources":["/home/gasper/Рабочий стол/artur-food/src/services/orderStatusService.js"],"sourcesContent":["// services/orderStatusService.js\n\nclass OrderStatusService {\n\tconstructor() {\n\t\tthis.intervals = new Map()\n\t\tthis.statusFlow = ['processing', 'cooking', 'delivering', 'delivered']\n\t}\n\n\tstartStatusProgression(orderId) {\n\t\tthis.stopStatusProgression(orderId)\n\n\t\tlet currentStatusIndex = 0\n\n\t\tconst updateStatus = async () => {\n\t\t\tif (currentStatusIndex >= this.statusFlow.length - 1) {\n\t\t\t\tthis.stopStatusProgression(orderId)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tcurrentStatusIndex++\n\t\t\tconst newStatus = this.statusFlow[currentStatusIndex]\n\n\t\t\ttry {\n\t\t\t\tawait this.updateOrderStatus(orderId, newStatus)\n\t\t\t\tconsole.log(`Статус заказа ${orderId} обновлен на: ${newStatus}`)\n\n\t\t\t\tif (currentStatusIndex >= this.statusFlow.length - 1) {\n\t\t\t\t\tthis.stopStatusProgression(orderId)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Ошибка обновления статуса:', error)\n\t\t\t\tthis.stopStatusProgression(orderId)\n\t\t\t}\n\t\t}\n\n\t\tconst intervalId = setInterval(updateStatus, 30000)\n\t\tthis.intervals.set(orderId, intervalId)\n\n\t\tconsole.log(\n\t\t\t`Запущено автоматическое обновление статуса для заказа ${orderId}`\n\t\t)\n\t}\n\n\tstopStatusProgression(orderId) {\n\t\tconst intervalId = this.intervals.get(orderId)\n\t\tif (intervalId) {\n\t\t\tclearInterval(intervalId)\n\t\t\tthis.intervals.delete(orderId)\n\t\t\tconsole.log(`Остановлено обновление статуса для заказа ${orderId}`)\n\t\t}\n\t}\n\n\tasync updateOrderStatus(orderId, newStatus) {\n\t\tconst response = await fetch(\n\t\t\t`https://68d662abc2a1754b426a8851.mockapi.io/orders/${orderId}`,\n\t\t\t{\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tstatus: newStatus,\n\t\t\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\t\t}),\n\t\t\t}\n\t\t)\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('Failed to update order status')\n\t\t}\n\n\t\treturn response.json()\n\t}\n\n\tstartForAllActiveOrders(orders) {\n\t\torders.forEach(order => {\n\t\t\tif (order.status !== 'delivered' && order.status !== 'completed') {\n\t\t\t\tthis.startStatusProgression(order.id)\n\t\t\t}\n\t\t})\n\t}\n\n\tstopAll() {\n\t\tthis.intervals.forEach((intervalId, orderId) => {\n\t\t\tclearInterval(intervalId)\n\t\t})\n\t\tthis.intervals.clear()\n\t\tconsole.log('Все интервалы обновления статусов остановлены')\n\t}\n}\n\nconst orderStatusService = new OrderStatusService()\nexport default orderStatusService\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}