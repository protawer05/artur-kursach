import React, { useState } from 'react'
import { Link } from 'react-router-dom'
import MapModal from '../../mapModal/MapModal'
import Notification from './Notification'
import { orderAPI } from '../../../services/api'
import s from './cartPage.module.scss'

const CartPage = ({
	cartItems = [],
	onUpdateQuantity,
	onRemoveItem,
	onClearCart,
	currentUser,
}) => {
	const [showMapModal, setShowMapModal] = useState(false) // –û–î–ù–û –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û
	const [orderType, setOrderType] = useState(null) // 'pickup' –∏–ª–∏ 'delivery'
	const [notification, setNotification] = useState({
		show: false,
		message: '',
		type: '',
	})

	const subtotal = cartItems.reduce(
		(sum, item) => sum + item.price * item.quantity,
		0
	)
	const total = subtotal

	const showNotification = (message, type = 'success') => {
		setNotification({ show: true, message, type })
		setTimeout(
			() => setNotification({ show: false, message: '', type: '' }),
			3000
		)
	}

	const handlePickupOrder = async pickupPoint => {
		try {
			if (!currentUser) {
				showNotification(
					'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç',
					'error'
				)
				return
			}

			const orderData = {
				type: 'pickup',
				items: cartItems,
				pickupPoint: {
					name: pickupPoint.name,
					address: pickupPoint.address,
					workingHours: pickupPoint.workingHours,
				},
				total,
				userId: parseInt(currentUser.id),
				userPhone: currentUser.phone,
				orderNumber: `ORD-${Date.now()}`,
			}

			await orderAPI.createOrder(orderData)

			showNotification(
				'–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ —Å–º—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.',
				'success'
			)
			onClearCart()
			setShowMapModal(false)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error)
			showNotification(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
				'error'
			)
		}
	}

	const handleDeliveryOrder = async deliveryData => {
		try {
			if (!currentUser) {
				showNotification(
					'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç',
					'error'
				)
				return
			}

			const orderData = {
				type: 'delivery',
				items: cartItems,
				deliveryData: {
					address: deliveryData.address,
					comment: deliveryData.comment,
					phone: deliveryData.phone,
				},
				total,
				userId: parseInt(currentUser.id),
				userPhone: currentUser.phone,
				orderNumber: `ORD-${Date.now()}`,
			}

			await orderAPI.createOrder(orderData)

			showNotification(
				'–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.',
				'success'
			)
			onClearCart()
			setShowMapModal(false)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error)
			showNotification(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
				'error'
			)
		}
	}

	const handleOrderClick = type => {
		setOrderType(type)
		setShowMapModal(true)
	}

	return (
		<div className={s.cartPage}>
			<div className={s.container}>
				<h1 className={s.title}>–ö–æ—Ä–∑–∏–Ω–∞</h1>

				{cartItems.length === 0 ? (
					<div className={s.emptyCart}>
						<div className={s.emptyCartIcon}>üõí</div>
						<h2>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
						<p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</p>
						<Link to='/' className={s.continueShopping}>
							–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é
						</Link>
					</div>
				) : (
					<div className={s.cartContent}>
						<div className={s.itemsList}>
							{cartItems.map(item => (
								<div key={item.id} className={s.cartItem}>
									<div className={s.itemImage}>
										<img src={item.thumbnail} alt={item.name} />
									</div>

									<div className={s.itemInfo}>
										<h3 className={s.itemName}>{item.name}</h3>
										<div className={s.itemPrice}>{item.price} —Ä—É–±</div>
									</div>

									<div className={s.itemControls}>
										<div className={s.quantityControls}>
											<button
												className={s.quantityBtn}
												onClick={() =>
													onUpdateQuantity(item.id, item.quantity - 1)
												}
												disabled={item.quantity <= 1}
											>
												-
											</button>
											<span className={s.quantity}>{item.quantity} —à—Ç</span>
											<button
												className={s.quantityBtn}
												onClick={() =>
													onUpdateQuantity(item.id, item.quantity + 1)
												}
											>
												+
											</button>
										</div>

										<button
											className={s.removeBtn}
											onClick={() => onRemoveItem(item.id)}
										>
											–£–¥–∞–ª–∏—Ç—å
										</button>
									</div>
								</div>
							))}
						</div>

						<div className={s.orderSummary}>
							<div className={s.totalSection}>
								<div className={s.totalLine}>
									<span>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
									<span>{subtotal} —Ä—É–±</span>
								</div>

								<div className={s.finalTotal}>
									<span>–ò—Ç–æ–≥–æ:</span>
									<span>{total} —Ä—É–±</span>
								</div>
							</div>

							{!currentUser && (
								<div className={s.authWarning}>
									<p>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</p>
								</div>
							)}

							<div className={s.orderButtons}>
								<button
									className={s.pickupBtn}
									onClick={() => handleOrderClick('pickup')}
									disabled={!currentUser}
								>
									–°–∞–º–æ–≤—ã–≤–æ–∑
								</button>
								<button
									className={s.deliveryBtn}
									onClick={() => handleOrderClick('delivery')}
									disabled={!currentUser}
								>
									–î–æ—Å—Ç–∞–≤–∫–∞
								</button>
							</div>

							<Link to='/' className={s.continueShopping}>
								‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º
							</Link>
						</div>
					</div>
				)}

				{/* –û–î–ù–û –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–õ–Ø –í–°–ï–• –¢–ò–ü–û–í –ó–ê–ö–ê–ó–ê */}
				{showMapModal && (
					<MapModal
						type={orderType}
						onClose={() => setShowMapModal(false)}
						onOrder={
							orderType === 'pickup' ? handlePickupOrder : handleDeliveryOrder
						}
						currentUser={currentUser}
					/>
				)}

				<Notification
					show={notification.show}
					message={notification.message}
					type={notification.type}
					onClose={() =>
						setNotification({ show: false, message: '', type: '' })
					}
				/>
			</div>
		</div>
	)
}

export default CartPage
