# –î–ê–ú–ü –ü–†–û–ï–ö–¢–ê: React Food Delivery App —Å SQLite

## üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê

```
foodies-app/
‚îú‚îÄ‚îÄ üìÑ package.json
‚îú‚îÄ‚îÄ üìÑ server.js
‚îú‚îÄ‚îÄ üìÑ init-db.js
‚îú‚îÄ‚îÄ üìÑ foodies.db (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ App.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.js
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ header/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ Header.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ header.module.scss
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ productList/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ ProductList.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ productList.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ ProductCard.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ productCard.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ ProductFilter.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ productFilter.module.scss
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ pages/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ cartPage/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ CartPage.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ cartPage.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ PickupModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ pickupModal.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ DeliveryModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ deliveryModal.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ profilePage/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ ProfilePage.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ profilePage.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ mainPage/
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ MainPage.jsx
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ mainPage.module.scss
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ ui/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ AuthModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ authModal.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ Notification.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ notification.module.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ ProductModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ productModal.module.scss
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ footer/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ üìÑ Footer.jsx
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ footer.module.scss
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ services/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ database.js
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ api.js
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ orderStatusService.js
‚îî‚îÄ‚îÄ üìÅ assets/
    ‚îú‚îÄ‚îÄ üìÑ Logo.png
    ‚îú‚îÄ‚îÄ üìÑ bx_bx-search-alt-2.svg
    ‚îú‚îÄ‚îÄ üìÑ Shopping cart.svg
    ‚îî‚îÄ‚îÄ üìÑ phone.svg
```

## üóÉÔ∏è –°–•–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•

### –¢–∞–±–ª–∏—Ü–∞: users
```sql
CREATE TABLE users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  phone TEXT UNIQUE NOT NULL,
  name TEXT,
  email TEXT,
  address TEXT,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

### –¢–∞–±–ª–∏—Ü–∞: products
```sql
CREATE TABLE products (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  price INTEGER NOT NULL,
  category TEXT NOT NULL,
  thumbnail TEXT,
  description TEXT,
  ingredients TEXT,
  weight TEXT,
  volume TEXT,
  cookingTime TEXT,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

### –¢–∞–±–ª–∏—Ü–∞: orders
```sql
CREATE TABLE orders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  orderNumber TEXT UNIQUE NOT NULL,
  userId INTEGER NOT NULL,
  type TEXT NOT NULL,
  status TEXT DEFAULT 'processing',
  total INTEGER NOT NULL,
  items TEXT NOT NULL,
  pickupPoint TEXT,
  deliveryData TEXT,
  userPhone TEXT NOT NULL,
  date DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (userId) REFERENCES users (id)
);
```

## üì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò package.json

```json
{
  "name": "foodies-app",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "react-scripts start",
    "build": "react-scripts build",
    "server": "node server.js",
    "init-db": "node init-db.js"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "react-scripts": "5.0.1",
    "sqlite3": "^5.1.6",
    "express": "^4.18.2",
    "cors": "^2.8.5"
  }
}
```

## üîß –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ô–õ–´

### 1. server.js
```javascript
const express = require('express');
const cors = require('cors');
const database = require('./src/services/database');

const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

// –†–æ—É—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/products', async (req, res) => {
  try {
    const products = await database.getAllProducts();
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/products/category/:category', async (req, res) => {
  try {
    const products = await database.getProductsByCategory(req.params.category);
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/products/search', async (req, res) => {
  try {
    const products = await database.searchProducts(req.query.q);
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –†–æ—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users/:id', async (req, res) => {
  try {
    const user = await database.getUserById(req.params.id);
    if (user) {
      res.json(user);
    } else {
      res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/users', async (req, res) => {
  try {
    const user = await database.createUser(req.body);
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.put('/api/users/:id', async (req, res) => {
  try {
    const user = await database.updateUser(req.params.id, req.body);
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –†–æ—É—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
app.post('/api/orders', async (req, res) => {
  try {
    const order = await database.createOrder(req.body);
    res.json(order);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/orders/user/:userId', async (req, res) => {
  try {
    const orders = await database.getOrdersByUserId(req.params.userId);
    res.json(orders);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.put('/api/orders/:id/status', async (req, res) => {
  try {
    const order = await database.updateOrderStatus(req.params.id, req.body.status);
    res.json(order);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
```

### 2. init-db.js
```javascript
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'foodies.db');
const db = new sqlite3.Database(dbPath);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT UNIQUE NOT NULL,
    name TEXT,
    email TEXT,
    address TEXT,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price INTEGER NOT NULL,
    category TEXT NOT NULL,
    thumbnail TEXT,
    description TEXT,
    ingredients TEXT,
    weight TEXT,
    volume TEXT,
    cookingTime TEXT,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    orderNumber TEXT UNIQUE NOT NULL,
    userId INTEGER NOT NULL,
    type TEXT NOT NULL,
    status TEXT DEFAULT 'processing',
    total INTEGER NOT NULL,
    items TEXT NOT NULL,
    pickupPoint TEXT,
    deliveryData TEXT,
    userPhone TEXT NOT NULL,
    date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES users (id)
  )`);

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const products = [
    {
      name: '–¢–æ–º –Ø–º',
      price: 290,
      category: '—Å—É–ø—ã',
      thumbnail: "https://cs13.pikabu.ru/post_img/big/2023/03/20/9/1679327108295817795.jpg",
      description: "–û—Å—Ç—Ä—ã–π –∏ –∞—Ä–æ–º–∞—Ç–Ω—ã–π —Ç–∞–π—Å–∫–∏–π —Å—É–ø —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏, –≥—Ä–∏–±–∞–º–∏ –∏ –∫–æ–∫–æ—Å–æ–≤—ã–º –º–æ–ª–æ–∫–æ–º. –ü–æ–¥–∞–µ—Ç—Å—è —Å —Ä–∏—Å–æ–º.",
      ingredients: "–∫—Ä–µ–≤–µ—Ç–∫–∏,—à–∞–º–ø–∏–Ω—å–æ–Ω—ã,–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ,–ª–µ–º–æ–Ω–≥—Ä–∞—Å—Å,–ª–∞–π–º,—á–∏–ª–∏",
      weight: "350–≥",
      cookingTime: "15-20 –º–∏–Ω"
    },
    {
      name: '–ü–∞–¥ –¢–∞–π',
      price: 320,
      category: '–≥–æ—Ä—è—á–µ–µ',
      thumbnail: "https://cs13.pikabu.ru/post_img/big/2023/03/20/9/1679327108295817795.jpg",
      description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–π—Å–∫–∞—è –ª–∞–ø—à–∞ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏, —Ç–æ—Ñ—É, —è–π—Ü–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–º.",
      ingredients: "—Ä–∏—Å–æ–≤–∞—è –ª–∞–ø—à–∞,–∫—Ä–µ–≤–µ—Ç–∫–∏,—Ç–æ—Ñ—É,—è–π—Ü–æ,—Ä–æ—Å—Ç–∫–∏ –±–æ–±–æ–≤,–∞—Ä–∞—Ö–∏—Å",
      weight: "300–≥",
      cookingTime: "12-15 –º–∏–Ω"
    },
    {
      name: '–¢–æ–º –ö—Ö–∞',
      price: 310,
      category: '—Å—É–ø—ã',
      thumbnail: "https://cs13.pikabu.ru/post_img/big/2023/03/20/9/1679327108295817795.jpg",
      description: "–ö—Ä–µ–º–æ–≤—ã–π —Å—É–ø —Å –∫—É—Ä–∏—Ü–µ–π –∏ –∫–æ–∫–æ—Å–æ–≤—ã–º –º–æ–ª–æ–∫–æ–º, —Å —è—Ä–∫–∏–º–∏ –Ω–æ—Ç–∞–º–∏ –ª–µ–º–æ–Ω–≥—Ä–∞—Å—Å–∞ –∏ –ª–∞–π–º–∞.",
      ingredients: "–∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ,–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ,—à–∞–º–ø–∏–Ω—å–æ–Ω—ã,–ª–µ–º–æ–Ω–≥—Ä–∞—Å—Å,–ª–∞–π–º,—á–∏–ª–∏",
      weight: "350–≥",
      cookingTime: "15-20 –º–∏–Ω"
    },
    {
      name: '–ó–µ–ª–µ–Ω–æ–µ –∫–∞—Ä—Ä–∏',
      price: 350,
      category: '–≥–æ—Ä—è—á–µ–µ',
      thumbnail: "https://cs13.pikabu.ru/post_img/big/2023/03/20/9/1679327108295817795.jpg",
      description: "–ê—Ä–æ–º–∞—Ç–Ω–æ–µ –∫–∞—Ä—Ä–∏ —Å –∫—É—Ä–∏—Ü–µ–π –∏ –æ–≤–æ—â–∞–º–∏ –≤ –∫–æ–∫–æ—Å–æ–≤–æ–º –º–æ–ª–æ–∫–µ —Å –∑–µ–ª–µ–Ω–æ–π –ø–∞—Å—Ç–æ–π –∫–∞—Ä—Ä–∏.",
      ingredients: "–∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ,–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ,–±–∞–∫–ª–∞–∂–∞–Ω,–±–∞–∑–∏–ª–∏–∫,–∑–µ–ª–µ–Ω–∞—è –ø–∞—Å—Ç–∞ –∫–∞—Ä—Ä–∏",
      weight: "320–≥",
      cookingTime: "20-25 –º–∏–Ω"
    },
    {
      name: '–°–ø—Ä–∏–Ω–≥ –†–æ–ª–ª—ã',
      price: 280,
      category: '–∑–∞–∫—É—Å–∫–∏',
      thumbnail: "https://cs13.pikabu.ru/post_img/big/2023/03/20/9/1679327108295817795.jpg",
      description: "–•—Ä—É—Å—Ç—è—â–∏–µ —Ä–∏—Å–æ–≤—ã–µ —Ä–æ–ª–ª—ã —Å –æ–≤–æ—â–∞–º–∏ –∏ —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–π –ª–∞–ø—à–æ–π. –ü–æ–¥–∞—é—Ç—Å—è —Å —Å–æ—É—Å–æ–º.",
      ingredients: "—Ä–∏—Å–æ–≤—ã–µ –±–ª–∏–Ω—á–∏–∫–∏,–º–æ—Ä–∫–æ–≤—å,–æ–≥—É—Ä–µ—Ü,—Å–∞–ª–∞—Ç,—Å—Ç–µ–∫–ª—è–Ω–Ω–∞—è –ª–∞–ø—à–∞,–º—è—Ç–∞",
      weight: "200–≥ (4 —à—Ç)",
      cookingTime: "8-10 –º–∏–Ω"
    },
    {
      name: '–¢–∞–π—Å–∫–∏–π —á–∞–π',
      price: 180,
      category: '–Ω–∞–ø–∏—Ç–∫–∏',
      thumbnail: "https://cs13.pikabu.ru/post_img/big/2023/03/20/9/1679327108295817795.jpg",
      description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ç–∞–π—Å–∫–∏–π —á–∞–π —Å –º–æ–ª–æ–∫–æ–º –∏ —Å–ø–µ—Ü–∏—è–º–∏. –û—Å–≤–µ–∂–∞—é—â–∏–π –∏ –±–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫.",
      ingredients: "—Ç–∞–π—Å–∫–∏–π —á–∞–π,—Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ,—Å–ø–µ—Ü–∏–∏,–ª–µ–¥",
      volume: "400–º–ª"
    }
  ];

  const stmt = db.prepare(`INSERT INTO products (name, price, category, thumbnail, description, ingredients, weight, volume, cookingTime)
                           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`);

  products.forEach(product => {
    stmt.run([
      product.name,
      product.price,
      product.category,
      product.thumbnail,
      product.description,
      product.ingredients,
      product.weight,
      product.volume,
      product.cookingTime
    ]);
  });

  stmt.finalize();

  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
});

db.close();
```

### 3. src/services/database.js
```javascript
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

class DatabaseService {
  constructor() {
    this.dbPath = path.join(process.cwd(), 'foodies.db');
    this.db = null;
    this.init();
  }

  init() {
    this.db = new sqlite3.Database(this.dbPath, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
      } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      }
    });
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  async getUserById(id) {
    return new Promise((resolve, reject) => {
      this.db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  }

  async getUserByPhone(phone) {
    return new Promise((resolve, reject) => {
      this.db.get('SELECT * FROM users WHERE phone = ?', [phone], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  }

  async createUser(userData) {
    return new Promise((resolve, reject) => {
      const { phone, name = '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', email = '', address = '' } = userData;
      this.db.run(
        'INSERT INTO users (phone, name, email, address) VALUES (?, ?, ?, ?)',
        [phone, name, email, address],
        function(err) {
          if (err) reject(err);
          else resolve({ id: this.lastID, phone, name, email, address });
        }
      );
    });
  }

  async updateUser(id, userData) {
    return new Promise((resolve, reject) => {
      const { name, email, address } = userData;
      this.db.run(
        'UPDATE users SET name = ?, email = ?, address = ?, updatedAt = CURRENT_TIMESTAMP WHERE id = ?',
        [name, email, address, id],
        function(err) {
          if (err) reject(err);
          else resolve({ id, ...userData });
        }
      );
    });
  }

  // –ü—Ä–æ–¥—É–∫—Ç—ã
  async getAllProducts() {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM products', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  async getProductsByCategory(category) {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM products WHERE category = ?', [category], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  async searchProducts(query) {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM products WHERE name LIKE ?', [`%${query}%`], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  // –ó–∞–∫–∞–∑—ã
  async createOrder(orderData) {
    return new Promise((resolve, reject) => {
      const {
        orderNumber,
        userId,
        type,
        total,
        items,
        pickupPoint,
        deliveryData,
        userPhone
      } = orderData;

      this.db.run(
        `INSERT INTO orders (orderNumber, userId, type, total, items, pickupPoint, deliveryData, userPhone)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          orderNumber,
          userId,
          type,
          total,
          JSON.stringify(items),
          pickupPoint ? JSON.stringify(pickupPoint) : null,
          deliveryData ? JSON.stringify(deliveryData) : null,
          userPhone
        ],
        function(err) {
          if (err) reject(err);
          else resolve({
            id: this.lastID,
            ...orderData,
            status: 'processing',
            date: new Date().toISOString()
          });
        }
      );
    });
  }

  async getOrdersByUserId(userId) {
    return new Promise((resolve, reject) => {
      this.db.all('SELECT * FROM orders WHERE userId = ? ORDER BY date DESC', [userId], (err, rows) => {
        if (err) reject(err);
        else {
          const orders = rows.map(row => ({
            ...row,
            items: JSON.parse(row.items),
            pickupPoint: row.pickupPoint ? JSON.parse(row.pickupPoint) : null,
            deliveryData: row.deliveryData ? JSON.parse(row.deliveryData) : null
          }));
          resolve(orders);
        }
      });
    });
  }

  async updateOrderStatus(orderId, status) {
    return new Promise((resolve, reject) => {
      this.db.run(
        'UPDATE orders SET status = ? WHERE id = ?',
        [status, orderId],
        function(err) {
          if (err) reject(err);
          else resolve({ id: orderId, status });
        }
      );
    });
  }

  close() {
    if (this.db) {
      this.db.close();
    }
  }
}

module.exports = new DatabaseService();
```

### 4. src/services/api.js
```javascript
const API_BASE = 'http://localhost:3001/api';

export const api = {
  // –ü—Ä–æ–¥—É–∫—Ç—ã
  async getProducts() {
    const response = await fetch(`${API_BASE}/products`);
    return response.json();
  },

  async getProductsByCategory(category) {
    const response = await fetch(`${API_BASE}/products/category/${category}`);
    return response.json();
  },

  async searchProducts(query) {
    const response = await fetch(`${API_BASE}/products/search?q=${query}`);
    return response.json();
  },

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  async getUserById(id) {
    const response = await fetch(`${API_BASE}/users/${id}`);
    return response.json();
  },

  async createUser(userData) {
    const response = await fetch(`${API_BASE}/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });
    return response.json();
  },

  async updateUser(id, userData) {
    const response = await fetch(`${API_BASE}/users/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });
    return response.json();
  },

  // –ó–∞–∫–∞–∑—ã
  async createOrder(orderData) {
    const response = await fetch(`${API_BASE}/orders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(orderData),
    });
    return response.json();
  },

  async getOrdersByUserId(userId) {
    const response = await fetch(`${API_BASE}/orders/user/${userId}`);
    return response.json();
  },

  async updateOrderStatus(orderId, status) {
    const response = await fetch(`${API_BASE}/orders/${orderId}/status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ status }),
    });
    return response.json();
  },
};
```

### 5. src/components/productList/ProductList.jsx
```javascript
import React, { useState, useEffect } from 'react';
import ProductCard from './ProductCard';
import ProductFilter from './ProductFilter';
import ProductModal from '../ui/ProductModal';
import { api } from '../../services/api';
import styles from './productList.module.scss';

const ProductList = ({ onAddToCart, searchQuery }) => {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeFilter, setActiveFilter] = useState('–≤—Å–µ');
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showProductModal, setShowProductModal] = useState(false);

  const filters = ['–≤—Å–µ', '—Å—É–ø—ã', '–≥–æ—Ä—è—á–µ–µ', '–∑–∞–∫—É—Å–∫–∏', '–Ω–∞–ø–∏—Ç–∫–∏'];

  useEffect(() => {
    fetchProducts();
  }, []);

  useEffect(() => {
    let result = products;

    if (searchQuery) {
      result = result.filter(product =>
        product.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (activeFilter !== '–≤—Å–µ') {
      result = result.filter(product => product.category === activeFilter);
    }

    setFilteredProducts(result);
  }, [products, searchQuery, activeFilter]);

  const fetchProducts = async () => {
    try {
      const data = await api.getProducts();

      const formattedProducts = data.map(product => ({
        ...product,
        ingredients: product.ingredients ? product.ingredients.split(',') : []
      }));

      setProducts(formattedProducts);
      setFilteredProducts(formattedProducts);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleProductClick = (product) => {
    setSelectedProduct(product);
    setShowProductModal(true);
  };

  const handleAddToCartFromModal = (product, quantity) => {
    onAddToCart(product, quantity);
    setShowProductModal(false);
  };

  if (loading) return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>;
  if (error) return <div className={styles.error}>–û—à–∏–±–∫–∞: {error}</div>;

  return (
    <div className={styles.container}>
      <ProductFilter
        filters={filters}
        activeFilter={activeFilter}
        onFilterChange={setActiveFilter}
      />

      {filteredProducts.length === 0 ? (
        <div className={styles.noProducts}>
          <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
        </div>
      ) : (
        <div className={styles.productsGrid}>
          {filteredProducts.map(product => (
            <ProductCard
              key={product.id}
              product={product}
              onAddToCart={onAddToCart}
              onProductClick={handleProductClick}
            />
          ))}
        </div>
      )}

      {showProductModal && selectedProduct && (
        <ProductModal
          product={selectedProduct}
          onClose={() => setShowProductModal(false)}
          onAddToCart={handleAddToCartFromModal}
        />
      )}
    </div>
  );
};

export default ProductList;
```

## üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SQLite –Ω–∞ Linux
```bash
# Ubuntu/Debian
sudo apt update && sudo apt install sqlite3

# CentOS/RHEL/Fedora
sudo yum install sqlite3
# –∏–ª–∏
sudo dnf install sqlite3

# –ü—Ä–æ–≤–µ—Ä–∫–∞
sqlite3 --version
```

### 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
npm install sqlite3 express cors
```

### 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
```bash
node init-db.js
```

### 4. –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
```bash
# –¢–µ—Ä–º–∏–Ω–∞–ª 1 - Backend —Å–µ—Ä–≤–µ—Ä
node server.js

# –¢–µ—Ä–º–∏–Ω–∞–ª 2 - Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
npm start
```

## üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –î–õ–Ø –ü–ï–†–ï–ù–ï–°–ï–ù–ò–Ø –° MOCKAPI

### –ó–∞–º–µ–Ω–µ–Ω—ã endpoints:
- `https://68d662abc2a1754b426a8851.mockapi.io/products` ‚Üí `http://localhost:3001/api/products`
- `https://68d662abc2a1754b426a8851.mockapi.io/users` ‚Üí `http://localhost:3001/api/users`
- `https://68d662abc2a1754b426a8851.mockapi.io/orders` ‚Üí `http://localhost:3001/api/orders`

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã:
- ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏
- ‚úÖ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- ‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
- ‚úÖ –õ–µ–≥–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
- ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

## üìä –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï

–í –±–∞–∑–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è 6 —Ç–æ–≤–∞—Ä–æ–≤:
1. –¢–æ–º –Ø–º (—Å—É–ø—ã) - 290 —Ä—É–±
2. –ü–∞–¥ –¢–∞–π (–≥–æ—Ä—è—á–µ–µ) - 320 —Ä—É–±
3. –¢–æ–º –ö—Ö–∞ (—Å—É–ø—ã) - 310 —Ä—É–±
4. –ó–µ–ª–µ–Ω–æ–µ –∫–∞—Ä—Ä–∏ (–≥–æ—Ä—è—á–µ–µ) - 350 —Ä—É–±
5. –°–ø—Ä–∏–Ω–≥ –†–æ–ª–ª—ã (–∑–∞–∫—É—Å–∫–∏) - 280 —Ä—É–±
6. –¢–∞–π—Å–∫–∏–π —á–∞–π (–Ω–∞–ø–∏—Ç–∫–∏) - 180 —Ä—É–±

–≠—Ç–æ—Ç –¥–∞–º–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —á–∞—Ç–µ! üéØ
