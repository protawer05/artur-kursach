import React, { useState } from 'react'
import { Link } from 'react-router-dom'
import PickupModal from './PickupModal'
import DeliveryModal from './DeliveryModal'
import Notification from './Notification'
import s from './cartPage.module.scss'

const CartPage = ({
	cartItems = [],
	onUpdateQuantity,
	onRemoveItem,
	onClearCart,
	currentUser,
}) => {
	const [showPickupModal, setShowPickupModal] = useState(false)
	const [showDeliveryModal, setShowDeliveryModal] = useState(false)
	const [selectedPickupPoint, setSelectedPickupPoint] = useState(null)
	const [notification, setNotification] = useState({
		show: false,
		message: '',
		type: '',
	})

	const subtotal = cartItems.reduce(
		(sum, item) => sum + item.price * item.quantity,
		0
	)
	const total = subtotal

	const pickupPoints = [
		{
			id: 1,
			name: '–†–¶ –ù–õ–û',
			address: '—É–ª. –Ø–∫—É–±–∞ –ö–æ–ª—è—Å–∞, 37',
			hours: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
		{
			id: 2,
			name: '–ú–∞—à–µ—Ä–æ–≤–∞',
			address: '–ø—Ä-—Ç. –ú–∞—à–µ—Ä–æ–≤–∞, 78',
			hours: '10:00 - 23:00',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
		{
			id: 3,
			name: '–¢–¶ –ì–ª–æ–±–æ',
			address: '—É–ª. –£–º–∞–Ω—Å–∫–∞—è, 54',
			hours: '10:00 - 23:00',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
		{
			id: 4,
			name: '–¢–¶ –ú–æ–∏–æ',
			address: '–ø—Ä. –ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è, 150–∞',
			hours: '10:00 - 23:00',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
		{
			id: 5,
			name: '–ü—Ä–∏—Ç—ã—Ü–∫–æ–≥–æ',
			address: '—É–ª. –ü—Ä–∏—Ç—ã—Ü–∫–æ–≥–æ, 83',
			hours: '10:00 - 23:00',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
		{
			id: 6,
			name: '–ù–∞–ª–∏–±–æ–∫—Å–∫–∞—è',
			address: '—É–ª. –ù–∞–ª–∏–±–æ–∫—Å–∫–∞—è, 1',
			hours: '10:00 - 23:00',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
		{
			id: 7,
			name: '–®–∞—Ñ–∞—Ä–Ω—è–Ω—Å–∫–∞—è',
			address: '—É–ª. –®–∞—Ñ–∞—Ä–Ω—è–Ω—Å–∫–∞—è, 11',
			hours: '10:00 - 23:00',
			deliveryTime: '–°—É—à–∏ - 15 –º–∏–Ω, WOK - 15 –º–∏–Ω',
		},
	]

	const showNotification = (message, type = 'success') => {
		setNotification({ show: true, message, type })
		setTimeout(
			() => setNotification({ show: false, message: '', type: '' }),
			3000
		)
	}

	const handlePickupOrder = async pickupPoint => {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if (!currentUser) {
				showNotification(
					'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç',
					'error'
				)
				return
			}

			const orderData = {
				type: 'pickup',
				items: cartItems,
				pickupPoint,
				total,
				status: 'confirmed',
				date: new Date().toISOString(),
				userId: currentUser.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				userPhone: currentUser.phone,
				orderNumber: `ORD-${Date.now()}`,
			}

			const response = await fetch(
				'https://68d662abc2a1754b426a8851.mockapi.io/orders',
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(orderData),
				}
			)

			if (response.ok) {
				showNotification(
					'–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ —Å–º—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.',
					'success'
				)
				onClearCart()
			} else {
				throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
			}
		} catch (error) {
			showNotification(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
				'error'
			)
		}

		setShowPickupModal(false)
	}

	const handleDeliveryOrder = async deliveryData => {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if (!currentUser) {
				showNotification(
					'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç',
					'error'
				)
				return
			}

			const orderData = {
				type: 'delivery',
				items: cartItems,
				deliveryData,
				total,
				status: 'confirmed',
				date: new Date().toISOString(),
				userId: currentUser.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				userPhone: currentUser.phone,
				orderNumber: `ORD-${Date.now()}`,
			}

			const response = await fetch(
				'https://68d662abc2a1754b426a8851.mockapi.io/orders',
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(orderData),
				}
			)

			if (response.ok) {
				showNotification(
					'–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.',
					'success'
				)
				onClearCart()
			} else {
				throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
			}
		} catch (error) {
			showNotification(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
				'error'
			)
		}

		setShowDeliveryModal(false)
	}

	return (
		<div className={s.cartPage}>
			<div className={s.container}>
				<h1 className={s.title}>–ö–æ—Ä–∑–∏–Ω–∞</h1>

				{cartItems.length === 0 ? (
					<div className={s.emptyCart}>
						<div className={s.emptyCartIcon}>üõí</div>
						<h2>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
						<p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</p>
						<Link to='/' className={s.continueShopping}>
							–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é
						</Link>
					</div>
				) : (
					<div className={s.cartContent}>
						<div className={s.itemsList}>
							{cartItems.map(item => (
								<div key={item.id} className={s.cartItem}>
									<div className={s.itemImage}>
										<img src={item.thumbnail} alt={item.name} />
									</div>

									<div className={s.itemInfo}>
										<h3 className={s.itemName}>{item.name}</h3>
										<div className={s.itemPrice}>{item.price} —Ä—É–±</div>
									</div>

									<div className={s.itemControls}>
										<div className={s.quantityControls}>
											<button
												className={s.quantityBtn}
												onClick={() =>
													onUpdateQuantity(item.id, item.quantity - 1)
												}
												disabled={item.quantity <= 1}
											>
												-
											</button>
											<span className={s.quantity}>{item.quantity} —à—Ç</span>
											<button
												className={s.quantityBtn}
												onClick={() =>
													onUpdateQuantity(item.id, item.quantity + 1)
												}
											>
												+
											</button>
										</div>

										<button
											className={s.removeBtn}
											onClick={() => onRemoveItem(item.id)}
										>
											–£–¥–∞–ª–∏—Ç—å
										</button>
									</div>
								</div>
							))}
						</div>

						<div className={s.orderSummary}>
							<div className={s.totalSection}>
								<div className={s.totalLine}>
									<span>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
									<span>{subtotal} —Ä—É–±</span>
								</div>

								<div className={s.finalTotal}>
									<span>–ò—Ç–æ–≥–æ:</span>
									<span>{total} —Ä—É–±</span>
								</div>
							</div>

							{!currentUser && (
								<div className={s.authWarning}>
									<p>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</p>
								</div>
							)}

							<div className={s.orderButtons}>
								<button
									className={s.pickupBtn}
									onClick={() => setShowPickupModal(true)}
									disabled={!currentUser}
								>
									–°–∞–º–æ–≤—ã–≤–æ–∑
								</button>
								<button
									className={s.deliveryBtn}
									onClick={() => setShowDeliveryModal(true)}
									disabled={!currentUser}
								>
									–î–æ—Å—Ç–∞–≤–∫–∞
								</button>
							</div>

							<Link to='/' className={s.continueShopping}>
								‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º
							</Link>
						</div>
					</div>
				)}

				{showPickupModal && (
					<PickupModal
						pickupPoints={pickupPoints}
						selectedPoint={selectedPickupPoint}
						onSelectPoint={setSelectedPickupPoint}
						onOrder={handlePickupOrder}
						onClose={() => setShowPickupModal(false)}
					/>
				)}

				{showDeliveryModal && (
					<DeliveryModal
						onOrder={handleDeliveryOrder}
						onClose={() => setShowDeliveryModal(false)}
					/>
				)}

				<Notification
					show={notification.show}
					message={notification.message}
					type={notification.type}
					onClose={() =>
						setNotification({ show: false, message: '', type: '' })
					}
				/>
			</div>
		</div>
	)
}

export default CartPage
